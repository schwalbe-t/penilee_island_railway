
#pragma once

#include "util.h.glsl"

const int PALETTE_SIZE = 32;
const int PALETTE_NO_IDX = PALETTE_SIZE;
const vec3 PALETTE_COLORS[PALETTE_SIZE + 1] = vec3[](
    RGB_255( 91, 166, 117), // [ 0]
    RGB_255(107, 201, 108), // [ 1]
    RGB_255(171, 221, 100), // [ 2]
    RGB_255(252, 239, 141), // [ 3]
    RGB_255(255, 184, 121), // [ 4]
    RGB_255(234,  98,  98), // [ 5]
    RGB_255(204,  66,  94), // [ 6]
    RGB_255(163,  40,  88), // [ 7]
    RGB_255(117,  23,  86), // [ 8]
    RGB_255( 57,   9,  71), // [ 9]
    RGB_255( 97,  24,  81), // [10]
    RGB_255(135,  53,  85), // [11]
    RGB_255(166,  85,  95), // [12]
    RGB_255(201, 115, 115), // [13]
    RGB_255(242, 174, 153), // [14]
    RGB_255(255, 195, 242), // [15]
    RGB_255(238, 143, 203), // [16]
    RGB_255(212, 110, 179), // [17]
    RGB_255(135,  62, 132), // [18]
    RGB_255( 31,  16,  42), // [19]
    RGB_255( 74,  48,  82), // [20]
    RGB_255(123,  84, 128), // [21]
    RGB_255(166, 133, 159), // [22]
    RGB_255(217, 189, 200), // [23]
    RGB_255(255, 255, 255), // [24]
    RGB_255(174, 226, 255), // [25]
    RGB_255(141, 183, 255), // [26]
    RGB_255(109, 128, 250), // [27]
    RGB_255(132, 101, 236), // [28]
    RGB_255(131,  77, 196), // [29]
    RGB_255(125,  45, 160), // [30]
    RGB_255( 78,  24, 124), // [31]

    RGB_255(255,   0, 255)  // [PALETTE_NO_IDX]
);

const int PALETTE_AS_DARK[PALETTE_SIZE + 1] = int[](
    20, // [ 0]
    0,  // [ 1]
    1,  // [ 2]
    4,  // [ 3]
    5,  // [ 4]
    6,  // [ 5]
    7,  // [ 6]
    8,  // [ 7]
    9,  // [ 8]
    19, // [ 9]
    9,  // [10]
    10, // [11]
    11, // [12]
    12, // [13]
    13, // [14]
    16, // [15]
    17, // [16]
    18, // [17]
    9,  // [18]
    19, // [19]
    9,  // [20]
    20, // [21]
    21, // [22]
    22, // [23]
    23, // [24]
    26, // [25]
    27, // [26]
    28, // [27]
    29, // [28]
    30, // [29]
    31, // [30]
     9, // [31]

    PALETTE_NO_IDX // [PALETTE_NO_IDX]
);

int findPaletteIndex(vec3 color) {
    int index = 0;
    float wasFound = 0.0;
    for(int i = 0; i < PALETTE_SIZE; i += 1) {
        float isMatch = 1.0 - step(0.01, distance(color, PALETTE_COLORS[i]));
        index += int(isMatch) * i;
        wasFound += isMatch;
    }
    float noneFound = 1.0 - step(0.0001, wasFound);
    index += int(noneFound) * PALETTE_NO_IDX;
    return index;
}